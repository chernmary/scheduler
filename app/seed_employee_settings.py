from app.database import SessionLocal
from app.models import Employee, EmployeeSetting, Location

def norm_name(s: str) -> str:
    return s.replace("—ë", "–µ").replace("–Å", "–ï").strip()

def _to_set(csv_or_none: str | None):
    if not csv_or_none:
        return set()
    return {x.strip() for x in csv_or_none.split(",") if x.strip()}

def seed_employee_settings():
    db = SessionLocal()
    try:
        settings_data = {
            "–ê–ª–∏—Å–∞ –ë–æ–π—Ü–æ–≤–∞": {
                "preferred_locations": None,
                "restricted_locations": "–ú–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å—ã",
            },
            "–ê–Ω—è –°—Ç–∞—Ü–µ–Ω–∫–æ": {
                "preferred_locations": "–ú–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å—ã",
                "restricted_locations": "–õ—É–Ω–æ–º–æ—Å–∏–∫,–ê–≤–∏–∞–ø–∞—Ä–∫",
            },
            "–í–∏–∫—Ç–æ—Ä–∏—è –ú–æ–ª—á–∞–Ω–æ–≤–∞": {
                "preferred_locations": None,
                "restricted_locations": "–õ—É–Ω–æ–º–æ—Å–∏–∫,–ê–≤–∏–∞–ø–∞—Ä–∫",
            },
            # –í–ê–ñ–ù–û: –∏–º—è –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Å –ï, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∏–∂–µ
            "–ö–∞—Ç—è –ü–∏—Å–∫–∞—Ä–µ–≤–∞": {
                "preferred_locations": None,
                "restricted_locations": "–õ—É–Ω–æ–º–æ—Å–∏–∫,–ú–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å—ã,–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –ø–æ–º–æ–≥–∞—Ç–æ—Ä",
            },
            "–ö–∞—Ç—è –°—Ç—Ä–∏–∂–∫–∏–Ω–∞": {
                "preferred_locations": "–ú–æ—Å–∫–≤–∞—Ä–∏—É–º 1,–ú–æ—Å–∫–≤–∞—Ä–∏—É–º 0,–ú—É–ª—å—Ç–ø–∞—Ä–∫",
                "restricted_locations": None,
            },
            "–ö—Ä–∏—Å—Ç–∏–Ω–∞ –ö–æ–ª–æ—Å–æ–≤–∞": {
                "preferred_locations": None,
                "restricted_locations": "–õ—É–Ω–æ–º–æ—Å–∏–∫,–ú–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å—ã,–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –ø–æ–º–æ–≥–∞—Ç–æ—Ä",
            },
            "–õ–∏–∑–∞ –¢–µ—Ä–µ—Ö–æ–≤–∞": {
                "preferred_locations": None,
                "restricted_locations": None,
            },
            "–ú–∞—Ä–∏—è –°–∞–≤–µ–ª—å–µ–≤–∞": {
                "preferred_locations": None,
                "restricted_locations": None,
            },
            "–ù–∞—Å—Ç—è –ì—É–±–∞—Ä–µ–≤–∞": {
                "preferred_locations": "–ú–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å—ã",
                "restricted_locations": "–õ—É–Ω–æ–º–æ—Å–∏–∫,–ê–≤–∏–∞–ø–∞—Ä–∫",
            },
            "–ü–æ–ª–∏–Ω–∞ –ö–æ–ª–∏—Å–Ω–∏—á–µ–Ω–∫–æ": {
                "preferred_locations": "–ú–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å—ã,–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –ø–æ–º–æ–≥–∞—Ç–æ—Ä",
                "restricted_locations": None,
            },
            "–°–∞—à–∞ –ü–æ–ø–æ–≤–∞": {
                "preferred_locations": "–õ—É–Ω–æ–º–æ—Å–∏–∫",
                "restricted_locations": "–ú–æ—Å–∫–≤–∞—Ä–∏—É–º 1,–ú–æ—Å–∫–≤–∞—Ä–∏—É–º 0,–ú–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å—ã,–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –ø–æ–º–æ–≥–∞—Ç–æ—Ä,–ú—É–ª—å—Ç–ø–∞—Ä–∫,–ê–≤–∏–∞–ø–∞—Ä–∫,–ú–æ—Å–∫–≤–∞—Ä–∏—É–º 3",
            },
            # üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ë–∞—Ä–∏–Ω–æ–≤–∞ –ù–ï –¥–æ–ø—É—â–µ–Ω–∞ –≤ –ú–æ—Å–∫–≤–∞—Ä–∏—É–º—ã, –ú–ö –∏ –ú—É–ª—å—Ç–ø–∞—Ä–∫
            "–°–æ—Ñ–∏—è –ë–∞—Ä–∏–Ω–æ–≤–∞": {
                "preferred_locations": "–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –ø–æ–º–æ–≥–∞—Ç–æ—Ä,–õ—É–Ω–æ–º–æ—Å–∏–∫,–ê–≤–∏–∞–ø–∞—Ä–∫",
                "restricted_locations": "–ú–æ—Å–∫–≤–∞—Ä–∏—É–º 1,–ú–æ—Å–∫–≤–∞—Ä–∏—É–º 0,–ú–æ—Å–∫–≤–∞—Ä–∏—É–º 3,–ú–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å—ã,–ú—É–ª—å—Ç–ø–∞—Ä–∫",
            },
        }

        employees = db.query(Employee).all()
        locations = db.query(Location).all()

        # –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∫–æ–Ω—Ñ–∏–≥–æ–≤ (—ë=–µ)
        cfg_by_name = {norm_name(k): v for k, v in settings_data.items()}
        loc_names = {l.name for l in locations}  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

        for emp in employees:
            cfg = cfg_by_name.get(norm_name(emp.full_name))
            # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–Ω–µ –∫–æ–ø–∏–º —Å—Ç–∞—Ä—ã–µ)
            db.query(EmployeeSetting).filter(EmployeeSetting.employee_id == emp.id).delete()

            preferred = _to_set(cfg["preferred_locations"]) if cfg else set()
            restricted = _to_set(cfg["restricted_locations"]) if cfg else set()

            for loc in locations:
                is_allowed = (loc.name not in restricted) if cfg else True
                is_preferred = (loc.name in preferred) if cfg else False

                db.add(EmployeeSetting(
                    employee_id=emp.id,
                    location_id=loc.id,
                    is_allowed=is_allowed,
                    is_preferred=is_preferred,
                ))

        db.commit()
        print("[SEED_SETTINGS] OK: employee_settings filled (overwritten)")
    finally:
        db.close()
