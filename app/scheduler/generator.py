# file: app/scheduler/generator.py

from datetime import date, datetime, timedelta
from collections import defaultdict
from sqlalchemy.orm import Session
from app.database.database import SessionLocal, init_db
from app.database.models import Employee, EmployeeSetting, Location, Shift

# 1) –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∞: —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
WEEKDAYS = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]

def format_day(d: date) -> str:
    """ dd.mm –î–¥ """
    return f"{d.day:02d}.{d.month:02d} {WEEKDAYS[d.weekday()]}"

def load_data(session: Session):
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–∫–∞—Ü–∏–∏"""
    employees = session.query(Employee).all()
    settings = {s.employee_id: s for s in session.query(EmployeeSetting).all()}
    locations = session.query(Location).order_by(Location.order).all()
    return employees, settings, locations

def can_work(es: EmployeeSetting, loc_id: int, day: date) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É es —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ location_id –≤ –¥–µ–Ω—å day"""
    # –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏
    if es.unavailable_days:
        if day.isoformat() in es.unavailable_days.split(","):
            return False
    # –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
    if es.restricted_locations:
        if str(loc_id) in es.restricted_locations.split(","):
            return False
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º—É–º —Å–º–µ–Ω –≤ –Ω–µ–¥–µ–ª—é –∏ –≤ 2 –Ω–µ–¥–µ–ª–∏
    # (—ç—Ç–æ—Ç –ø–æ–¥—Å—á—ë—Ç –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω –ø–æ–∑–∂–µ –≤ generate)
    return True

def generate_schedule(start: date, weeks: int = 2):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –≥–µ–Ω–µ—Ä–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ weeks –Ω–µ–¥–µ–ª—å, –Ω–∞—á–∏–Ω–∞—è —Å start"""
    init_db()  # —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω—ã)
    session = SessionLocal()
    try:
        employees, settings_map, locations = load_data(session)

        # –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —É—á—ë—Ç–∞ —Å–∫–æ–ª—å–∫–æ —Å–º–µ–Ω —É –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:
        shifts_count_week = defaultdict(int)
        shifts_count_2weeks = defaultdict(int)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç: —Å–ª–æ–≤–∞—Ä—å date ‚Üí list of (Location, Employee)
        schedule = defaultdict(list)

        total_days = weeks * 7
        for offset in range(total_days):
            today = start + timedelta(days=offset)
            week_index = offset // 7  # 0 –∏–ª–∏ 1

            # –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            for loc in locations:
                # –∏—â–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:
                candidates = []
                for emp in employees:
                    es = settings_map.get(emp.id)
                    if not es:
                        continue
                    # 1. –º–æ–∂–Ω–æ –ª–∏ –ø–æ –¥–Ω—é –∏ –ª–æ–∫–∞—Ü–∏–∏?
                    if not can_work(es, loc.id, today):
                        continue
                    # 2. –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏ –º–∞–∫—Å. —Å–º–µ–Ω—ã?
                    max_w = es.max_shifts_per_week or 0
                    max_2w = es.max_shifts_per_2weeks or 0
                    if shifts_count_week[(emp.id, week_index)] >= max_w:
                        continue
                    if shifts_count_2weeks[emp.id] >= max_2w:
                        continue
                    candidates.append((emp, es))

                # —Å–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—â–∏–µ, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                candidates.sort(key=lambda pair: pair[1].is_preferred, reverse=True)

                # —Å–ø–µ—Ü-–ø—Ä–∞–≤–∏–ª–æ: –≤ Main Building –Ω–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –°—Ç—Ä–∏–∂–∫–∏–Ω—É –∏ –°—Ç–∞—Ü–µ–Ω–∫–æ
                # (—ç—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ ¬´–µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥—Ä—É–≥–∞—è¬ª)
                if loc.zone == "main_building":
                    # –µ—Å–ª–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –∫—Ç–æ-—Ç–æ –∏–∑ –¥–≤—É—Ö ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–æ–∏—Ö
                    assigned_today = [e.full_name for _, e in schedule[today]]
                    forbidden = {"–ö–∞—Ç—è –°—Ç—Ä–∏–∂–∫–∏–Ω–∞", "–ê–Ω—è –°—Ç–∞—Ü–µ–Ω–∫–æ"}
                    if forbidden & set(assigned_today):
                        candidates = [c for c in candidates
                                      if c[0].full_name not in forbidden]

                # –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if candidates:
                    chosen, _ = candidates[0]
                    schedule[today].append((loc, chosen))
                    # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏
                    shifts_count_week[(chosen.id, week_index)] += 1
                    shifts_count_2weeks[chosen.id] += 1

        # –ü–µ—á–∞—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüìÖ –ì—Ä–∞—Ñ–∏–∫ —Å {format_day(start)} –Ω–∞ {weeks*7} –¥–Ω–µ–π:\n")
        for d in sorted(schedule):
            print(f"{format_day(d)}:")
            for loc, emp in schedule[d]:
                print(f"   ‚Ä¢ {loc.name}: {emp.full_name}")
            print()

    finally:
        session.close()

if __name__ == "__main__":
    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–∞—Ä—Ç—É–µ–º —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ 18 –∞–≤–≥—É—Å—Ç–∞ 2025
    generate_schedule(date(2025, 8, 18), weeks=2)

